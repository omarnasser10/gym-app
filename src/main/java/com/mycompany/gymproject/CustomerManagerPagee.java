/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.gymproject;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.Random;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

/**
 *
 * @author Haneen
 */
public class CustomerManagerPagee extends javax.swing.JFrame {
private static FileHandler f=new FileHandler("myDirectory");
    private static String filename="login.txt";
    /**
     * Creates new form CustomerManagerPagee
     */
    public CustomerManagerPagee() {
        initComponents();
        this.setVisible(true);
        jPanel1.add(jMenuBar1);
                        setExtendedState(JFrame.MAXIMIZED_BOTH);

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(43, 39, 56));

        jPanel1.setBackground(new java.awt.Color(43, 39, 56));
        jPanel1.setForeground(new java.awt.Color(255, 51, 0));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Welcome to Customer Manager Page");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(212, 212, 212)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 908, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(246, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(355, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(361, 361, 361))
        );

        jMenuBar1.setBackground(new java.awt.Color(110, 84, 181));
        jMenuBar1.setBorder(null);
        jMenuBar1.setForeground(new java.awt.Color(51, 0, 51));
        jMenuBar1.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        jMenuBar1.setPreferredSize(new java.awt.Dimension(1198, 40));

        jMenu1.setText("Add Customer");
        jMenu1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Delete Customer");
        jMenu2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Show Customer by Id");
        jMenu3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        jMenu4.setText("Show Membership by Id");
        jMenu4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu4MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu4);

        jMenu5.setText("Show Exercise Plan by Id");
        jMenu5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jMenu5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu5MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu5);

        jMenu6.setText("Renew Membership");
        jMenu6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jMenu6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu6MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu6);

        jMenu7.setText("Logout");
        jMenu7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jMenu7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu7MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu7);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        // TODO add your handling code here:
        openaddCustomere();
    }//GEN-LAST:event_jMenu1MouseClicked

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        // TODO add your handling code here:
        opendeleteCustomer();
    }//GEN-LAST:event_jMenu2MouseClicked

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        // TODO add your handling code here:
        openshowCustomerById();
    }//GEN-LAST:event_jMenu3MouseClicked

    private void jMenu4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseClicked
        // TODO add your handling code here:
         openshowMembershipById();
    }//GEN-LAST:event_jMenu4MouseClicked

    private void jMenu5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu5MouseClicked
        // TODO add your handling code here:
        openshowExercisePlanById();
    }//GEN-LAST:event_jMenu5MouseClicked

    private void jMenu6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu6MouseClicked
        // TODO add your handling code here:
        openrenewMambership();
    }//GEN-LAST:event_jMenu6MouseClicked

    private void jMenu7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu7MouseClicked
        // TODO add your handling code here:
        int a=JOptionPane.showConfirmDialog(null, "do you really want to Logout","Select",JOptionPane.YES_NO_OPTION);
        if(a==0)
        {
            setVisible(false);
            new LoginPagee().setVisible(true);
        }
    }//GEN-LAST:event_jMenu7MouseClicked

     private void openrenewMambership() {
         JFrame frame = new JFrame("Renew Membership");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        
        frame.getContentPane().setBackground(new Color(0x2B2738)); 

        FlowLayout flowLayout = new FlowLayout(FlowLayout.CENTER, 10, 10);
        JPanel panel = new JPanel(flowLayout);
        panel.setBackground(new Color(0x2B2738));
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        JLabel lblCustomerId = new JLabel("Customer ID:");
        lblCustomerId.setForeground(Color.WHITE);

        JTextField txtCustomerId = new JTextField();
        txtCustomerId.setBackground(new Color(0x3B364C));
        txtCustomerId.setForeground(Color.WHITE);
        txtCustomerId.setPreferredSize(new Dimension(150, 30));

        JLabel lblNewStatus = new JLabel("New Status (true/false):");
        lblNewStatus.setForeground(Color.WHITE);

        JCheckBox chkNewStatus = new JCheckBox();
        chkNewStatus.setBackground(new Color(0x2B2738)); 
        chkNewStatus.setForeground(Color.WHITE);

        JLabel lblNewEndDate = new JLabel("New End Date (YYYY-MM-DD):");
        lblNewEndDate.setForeground(Color.WHITE);

        JTextField txtNewEndDate = new JTextField();
        txtNewEndDate.setBackground(new Color(0x3B364C));
        txtNewEndDate.setForeground(Color.WHITE);
        txtNewEndDate.setPreferredSize(new Dimension(150, 30));

        JButton btnSubmit = new JButton("Submit");
        btnSubmit.setBackground(new Color(0x6E54B5)); 
        btnSubmit.setForeground(new Color(0xFCFCFA)); 
        btnSubmit.setPreferredSize(new Dimension(100, 30));

        panel.add(lblCustomerId);
        panel.add(txtCustomerId);
        panel.add(lblNewStatus);
        panel.add(chkNewStatus);
        panel.add(lblNewEndDate);
        panel.add(txtNewEndDate);
        panel.add(btnSubmit);

        frame.add(panel);

        frame.pack(); 
        frame.setLocationRelativeTo(null); 
        frame.setVisible(true);
   
        // Button action
        btnSubmit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Retrieve input values
                String customerId = txtCustomerId.getText().trim();
                boolean newStatus = chkNewStatus.isSelected();
                String newEndDate = txtNewEndDate.getText().trim();

                // Validate inputs
                if (customerId.isEmpty()) {
                    JOptionPane.showMessageDialog(frame,
                            "Customer ID cannot be empty.",
                            "Input Error",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (!chkNewStatus.isSelected()) {
                    JOptionPane.showMessageDialog(frame,
                            "Please check the New Status box to confirm the status.",
                            "Input Error",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (newEndDate.isEmpty()) {
                    JOptionPane.showMessageDialog(frame,
                            "New End Date cannot be empty.",
                            "Input Error",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }

                try {
                    // Additional validation for date format (basic example)
                    if (!newEndDate.matches("\\d{4}-\\d{2}-\\d{2}")) {
                        throw new IllegalArgumentException("New End Date must be in format YYYY-MM-DD.");
                    }

                    // Call the renew_membership method in CustomerManager
                    CustomerManager cm = new CustomerManager();
                    String message = cm.renew_membership(customerId, newStatus, newEndDate);

                    // Show success message
                    JOptionPane.showMessageDialog(frame, message);

                } catch (IllegalArgumentException ex) {
                    // Show error message for invalid date format or other issues
                    JOptionPane.showMessageDialog(frame,
                            "Error: " + ex.getMessage(),
                            "Input Error",
                            JOptionPane.ERROR_MESSAGE);
                } catch (Exception ex) {
                    // Handle any other exceptions
                    JOptionPane.showMessageDialog(frame,
                            "An unexpected error occurred: " + ex.getMessage(),
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        frame.setVisible(true);
    }

    private void openshowExercisePlanById(){
         JFrame showCustomerFrame = new JFrame("Show ExercisePlan By ID");
        showCustomerFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        showCustomerFrame.getContentPane().setBackground(new Color(0x2B2738)); // اللون #2B2738

        FlowLayout flowLayout = new FlowLayout(FlowLayout.CENTER, 10, 10);
        JPanel panel = new JPanel(flowLayout);
        panel.setBackground(new Color(0x2B2738)); 
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        JLabel idLabel = new JLabel("Customer ID:");
        idLabel.setForeground(Color.WHITE); 

        JTextField idField = new JTextField();
        idField.setBackground(new Color(0x3B364C));
        idField.setForeground(Color.WHITE); 
        idField.setPreferredSize(new Dimension(150, 30)); 

        JButton showButton = new JButton("Show");
        showButton.setBackground(new Color(0x6E54B5)); 
        showButton.setForeground(new Color(0xFCFCFA)); 
        showButton.setPreferredSize(new Dimension(100, 30)); 
        JLabel resultLabel = new JLabel("Customer Details:");
        resultLabel.setForeground(Color.WHITE); 

        JTextArea resultArea = new JTextArea(5, 20);
        resultArea.setEditable(false);
        resultArea.setBackground(new Color(0x3B364C)); 
        resultArea.setForeground(Color.WHITE); 
        resultArea.setBorder(BorderFactory.createLineBorder(Color.GRAY));

        panel.add(idLabel);
        panel.add(idField);
        panel.add(showButton);
        panel.add(new JLabel()); 
        panel.add(resultLabel);
        panel.add(new JScrollPane(resultArea)); 

        showCustomerFrame.add(panel);

        showCustomerFrame.pack(); 
        showCustomerFrame.setLocationRelativeTo(null); 
        showCustomerFrame.setVisible(true);
        // Add action listener for Show button
    showButton.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        String customerId = idField.getText().trim();  // Get the ID from the text field

        // Check if the Customer ID is empty
        if (customerId.isEmpty()) {
            JOptionPane.showMessageDialog(showCustomerFrame, "Please enter a Customer ID!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if the Customer ID is a valid integer
        try {
            Integer.parseInt(customerId);  // Try to parse the ID as an integer
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(showCustomerFrame, "Customer ID must be a valid integer!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Retrieve the exercise plan for the customer using the valid ID
        CustomerManager cm = new CustomerManager();
        String customerData = cm.showExercisePlanOfCustomerId(customerId);  // Retrieve the exercise plan data

        // Check if the exercise plan data is available
        if (customerData == null || customerData.isEmpty()) {
            JOptionPane.showMessageDialog(showCustomerFrame, "No exercise plan found for this Customer ID!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            resultArea.setText(customerData);  // Display the exercise plan in the result area
        }
    }
});
    }
    private void openshowMembershipById(){
     JFrame showCustomerFrame = new JFrame("Show Membership By ID");
        showCustomerFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        
        showCustomerFrame.getContentPane().setBackground(new Color(0x2B2738));  // اللون #2B2738

       
        FlowLayout flowLayout = new FlowLayout(FlowLayout.CENTER, 10, 10);
        JPanel panel = new JPanel(flowLayout);
        panel.setBackground(new Color(0x2B2738)); 
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        
        JLabel idLabel = new JLabel("Customer ID:");
        idLabel.setForeground(Color.WHITE); 

        JTextField idField = new JTextField();
        idField.setBackground(new Color(0x3B364C)); 
        idField.setForeground(Color.WHITE);
        idField.setPreferredSize(new Dimension(150, 30)); 

        JButton showButton = new JButton("Show");
        showButton.setBackground(new Color(0x6E54B5)); // تعيين خلفية الزر
        showButton.setForeground(new Color(0xFCFCFA)); // تعيين لون النص داخل الزر
        showButton.setPreferredSize(new Dimension(100, 30)); // تعيين الحجم

        JLabel resultLabel = new JLabel("Customer Details:");
        resultLabel.setForeground(Color.WHITE);

        JTextArea resultArea = new JTextArea(5, 20);
        resultArea.setEditable(false);
        resultArea.setBackground(new Color(0x3B364C)); 
        resultArea.setForeground(Color.WHITE); 
        resultArea.setBorder(BorderFactory.createLineBorder(Color.GRAY));

        panel.add(idLabel);
        panel.add(idField);
        panel.add(showButton);
        panel.add(new JLabel()); 
        panel.add(resultLabel);
        panel.add(new JScrollPane(resultArea)); 

        showCustomerFrame.add(panel);

        showCustomerFrame.pack();
        showCustomerFrame.setLocationRelativeTo(null); 
        showCustomerFrame.setVisible(true);
    
        // Add action listener for Show button
        showButton.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        String customerId = idField.getText().trim();  // Get the ID from the text field

        // Check if the Customer ID is empty
        if (customerId.isEmpty()) {
            JOptionPane.showMessageDialog(showCustomerFrame, "Please enter a Customer ID!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if the Customer ID is a valid integer
        try {
            Integer.parseInt(customerId);  // Try to parse the ID as an integer
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(showCustomerFrame, "Customer ID must be a valid integer!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Retrieve the membership data using the valid ID
        CustomerManager cm = new CustomerManager();
        String customerData = cm.showMemberShipOfCustomerId(customerId);  // Retrieve customer membership data

        // Check if customer data is available
        if (customerData == null || customerData.isEmpty()) {
            JOptionPane.showMessageDialog(showCustomerFrame, "No membership found for this Customer ID!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            resultArea.setText(customerData);  // Display the customer data in the result area
        }
    }
});
    }

    private void openshowCustomerById(){
       JFrame showCustomerFrame = new JFrame("Show Customer By ID");
        showCustomerFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        showCustomerFrame.getContentPane().setBackground(new Color(0x2B2738));  // اللون #2B2738

        FlowLayout flowLayout = new FlowLayout(FlowLayout.CENTER, 10, 10);
        JPanel panel = new JPanel(flowLayout);
          panel.setBackground(new Color(0x2B2738)); 
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        JLabel idLabel = new JLabel("Customer ID:");
        idLabel.setForeground(Color.WHITE); 

        JTextField idField = new JTextField();
        idField.setBackground(new Color(0x3B364C)); 
        idField.setForeground(Color.WHITE);
        idField.setPreferredSize(new Dimension(150, 30)); 
        JButton showButton = new JButton("Show");
        showButton.setBackground(new Color(0x6E54B5));
        showButton.setForeground(new Color(0xFCFCFA)); 
        showButton.setPreferredSize(new Dimension(100, 30)); 

        JLabel resultLabel = new JLabel("Customer Details:");
        resultLabel.setForeground(Color.WHITE);

        JTextArea resultArea = new JTextArea(5, 20);
        resultArea.setEditable(false);
        resultArea.setBackground(new Color(0x3B364C)); // تعيين خلفية النص إلى #3B364C
        resultArea.setForeground(Color.WHITE); // تعيين لون النص
        resultArea.setBorder(BorderFactory.createLineBorder(Color.GRAY));

        panel.add(idLabel);
        panel.add(idField);
        panel.add(showButton);
        panel.add(new JLabel()); // Empty placeholder
        panel.add(resultLabel);
        panel.add(new JScrollPane(resultArea)); 

        showCustomerFrame.add(panel);

        showCustomerFrame.pack(); 
        showCustomerFrame.setLocationRelativeTo(null); 
        showCustomerFrame.setVisible(true);
        // Add action listener for Show button
     showButton.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        String customerId = idField.getText().trim();  // Get the ID from the text field

        // Check if the Customer ID is empty
        if (customerId.isEmpty()) {
            JOptionPane.showMessageDialog(showCustomerFrame, "Please enter a Customer ID!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if the Customer ID is a valid integer
        try {
            Integer.parseInt(customerId);  // Try to parse the ID as an integer
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(showCustomerFrame, "Customer ID must be a valid integer!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Retrieve the customer data using the valid ID
        CustomerManager cm = new CustomerManager();
        String customerData = cm.show_by_id(customerId);  // Retrieve customer data based on ID

        // Check if customer data is available
        if (customerData == null || customerData.isEmpty()) {
            JOptionPane.showMessageDialog(showCustomerFrame, "Customer with this ID not found!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            resultArea.setText(customerData);  // Display the customer data in the result area
        }
    }
});
    }

    private void opendeleteCustomer(){
          JFrame deleteCustomer = new JFrame("Delete Customer");
        deleteCustomer.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        deleteCustomer.setSize(400, 300);

        deleteCustomer.getContentPane().setBackground(new Color(0x2B2738));

      
        JPanel panel = new JPanel();
        panel.setLayout(new FlowLayout(FlowLayout.CENTER, 10, 10)); 
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        panel.setBackground(new Color(0x2B2738)); 

        JLabel idLabel = new JLabel("Customer id:");
        idLabel.setForeground(Color.WHITE); 

        JTextField idField = new JTextField();
        idField.setBackground(new Color(0x3B364C)); 
        idField.setForeground(Color.WHITE); 
        idField.setPreferredSize(new Dimension(150, 30)); 

        // إضافة الزر
        JButton deleteButton = new JButton("Delete");
        deleteButton.setBackground(new Color(0x6E54B5)); 
        deleteButton.setForeground(new Color(0xFCFCFA));
        deleteButton.setPreferredSize(new Dimension(100, 30)); 

        panel.add(idLabel);
        panel.add(idField);
        panel.add(deleteButton);

        deleteCustomer.add(panel);

        deleteCustomer.setLocationRelativeTo(null); 

        deleteCustomer.setVisible(true);
    deleteCustomer.pack();
    

        // Add action listener for Delete button
     deleteButton.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        String customerId = idField.getText().trim();  // Get the ID from the text field

        // Check if the ID is empty
        if (customerId.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter a Customer ID!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if the ID is a valid integer
        try {
            Integer.parseInt(customerId);  // Try to parse the ID as an integer
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Customer ID must be a valid integer!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Perform the deletion if the customer exists
        CustomerManager cm = new CustomerManager();
        if (cm.search_by_id(customerId)) {
            cm.delete(customerId);  // Delete the customer using the ID
            JOptionPane.showMessageDialog(null, "Customer deleted!");
            deleteCustomer.dispose();  // Close the delete window
        } else {
            JOptionPane.showMessageDialog(null, "Customer with this ID not found!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
});
    }

    private void openaddCustomere(){
    JFrame frame = new JFrame("Add Customer");
frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
frame.getContentPane().setBackground(new Color(0x2B2738));  
GroupLayout layout = new GroupLayout(frame.getContentPane());
frame.getContentPane().setLayout(layout);
JLabel nameLabel = new JLabel("Name:");
nameLabel.setForeground(Color.WHITE);
JTextField nameField = new JTextField();
nameField.setBackground(new Color(0x3B364C));
nameField.setForeground(Color.WHITE);
nameField.setPreferredSize(new Dimension(200, 30));

JLabel ageLabel = new JLabel("Age:");
ageLabel.setForeground(Color.WHITE);
JTextField ageField = new JTextField();
ageField.setBackground(new Color(0x3B364C));
ageField.setForeground(Color.WHITE);
ageField.setPreferredSize(new Dimension(200, 30));

JLabel phoneLabel = new JLabel("Phone:");
phoneLabel.setForeground(Color.WHITE);
JTextField phoneField = new JTextField();
phoneField.setBackground(new Color(0x3B364C));
phoneField.setForeground(Color.WHITE);
phoneField.setPreferredSize(new Dimension(200, 30));

JLabel emailLabel = new JLabel("Email:");
emailLabel.setForeground(Color.WHITE);
JTextField emailField = new JTextField();
emailField.setBackground(new Color(0x3B364C));
emailField.setForeground(Color.WHITE);
emailField.setPreferredSize(new Dimension(200, 30));

JLabel heightLabel = new JLabel("Height (cm):");
heightLabel.setForeground(Color.WHITE);
JTextField heightField = new JTextField();
heightField.setBackground(new Color(0x3B364C));
heightField.setForeground(Color.WHITE);
heightField.setPreferredSize(new Dimension(200, 30));

JLabel weightLabel = new JLabel("Weight (kg):");
weightLabel.setForeground(Color.WHITE);
JTextField weightField = new JTextField();
weightField.setBackground(new Color(0x3B364C));
weightField.setForeground(Color.WHITE);
weightField.setPreferredSize(new Dimension(200, 30));

JLabel startDateLabel = new JLabel("Start Date of membership (YYYY-MM-DD):");
startDateLabel.setForeground(Color.WHITE);
JTextField startDateField = new JTextField();
startDateField.setBackground(new Color(0x3B364C));
startDateField.setForeground(Color.WHITE);
startDateField.setPreferredSize(new Dimension(200, 30));

JLabel endDateLabel = new JLabel("End Date of membership (YYYY-MM-DD):");
endDateLabel.setForeground(Color.WHITE);
JTextField endDateField = new JTextField();
endDateField.setBackground(new Color(0x3B364C));
endDateField.setForeground(Color.WHITE);
endDateField.setPreferredSize(new Dimension(200, 30));

JLabel typeLabel = new JLabel("Type of membership:");
typeLabel.setForeground(Color.WHITE);
JTextField typeField = new JTextField();
typeField.setBackground(new Color(0x3B364C));
typeField.setForeground(Color.WHITE);
typeField.setPreferredSize(new Dimension(200, 30));

// تغيير إلى JCheckBox
JLabel isActiveLabel = new JLabel("Active:");
isActiveLabel.setForeground(Color.WHITE);
JCheckBox isActiveCheckbox = new JCheckBox("Active");
isActiveCheckbox.setBackground(new Color(0x3B364C));
isActiveCheckbox.setForeground(Color.WHITE);

JButton addButton = new JButton("Add Customer");
addButton.setBackground(new Color(0x6E54B5));
addButton.setForeground(new Color(0xFCFCFA));
addButton.setPreferredSize(new Dimension(150, 40));

// ترتيب المكونات باستخدام GroupLayout
layout.setAutoCreateGaps(true);
layout.setAutoCreateContainerGaps(true);

// ترتيب التصنيفات وحقول النصوص عموديًا
layout.setHorizontalGroup(
    layout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addComponent(nameLabel)
        .addComponent(nameField)
        .addComponent(ageLabel)
        .addComponent(ageField)
        .addComponent(phoneLabel)
        .addComponent(phoneField)
        .addComponent(emailLabel)
        .addComponent(emailField)
        .addComponent(heightLabel)
        .addComponent(heightField)
        .addComponent(weightLabel)
        .addComponent(weightField)
        .addComponent(startDateLabel)
        .addComponent(startDateField)
        .addComponent(endDateLabel)
        .addComponent(endDateField)
        .addComponent(typeLabel)
        .addComponent(typeField)
        .addComponent(isActiveLabel)
        .addComponent(isActiveCheckbox)  // Add the checkbox here
        .addComponent(addButton)
);

layout.setVerticalGroup(
    layout.createSequentialGroup()
        .addComponent(nameLabel)
        .addComponent(nameField)
        .addComponent(ageLabel)
        .addComponent(ageField)
        .addComponent(phoneLabel)
        .addComponent(phoneField)
        .addComponent(emailLabel)
        .addComponent(emailField)
        .addComponent(heightLabel)
        .addComponent(heightField)
        .addComponent(weightLabel)
        .addComponent(weightField)
        .addComponent(startDateLabel)
        .addComponent(startDateField)
        .addComponent(endDateLabel)
        .addComponent(endDateField)
        .addComponent(typeLabel)
        .addComponent(typeField)
        .addComponent(isActiveLabel)
        .addComponent(isActiveCheckbox)  // Add the checkbox here
        .addComponent(addButton)
);

frame.pack();
frame.setLocationRelativeTo(null); 
frame.setVisible(true);

// Action listener for the "Add Customer" button
addButton.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        StringBuilder errors = new StringBuilder();

        // Collecting data from the fields
        String name = nameField.getText().trim();
        String ageText = ageField.getText().trim();
        String phone = phoneField.getText().trim();
        String email = emailField.getText().trim();
        String heightText = heightField.getText().trim();
        String weightText = weightField.getText().trim();
        String startDate = startDateField.getText().trim();
        String endDate = endDateField.getText().trim();
        String type = typeField.getText().trim();
        
        // Get the value of isActive from the checkbox
        boolean isActive = isActiveCheckbox.isSelected();

        // Validation for each field
        if (name.isEmpty()) {
            errors.append("- Name cannot be empty.\n");
        }

        if (ageText.isEmpty()) {
            errors.append("- Age cannot be empty.\n");
        } else {
            try {
                int age = Integer.parseInt(ageText);
                if (age <= 0) errors.append("- Age must be a positive number.\n");
            } catch (NumberFormatException ex) {
                errors.append("- Age must be a valid number.\n");
            }
        }

        if (phone.isEmpty()) {
            errors.append("- Phone cannot be empty.\n");
        } else if (!phone.matches("\\d{10,15}")) {
            errors.append("- Phone number must contain 10-15 digits.\n");
        }

        if (email.isEmpty()) {
            errors.append("- Email cannot be empty.\n");
        } else if (!email.matches("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$")) {
            errors.append("- Invalid email format.\n");
        }

        if (heightText.isEmpty()) {
            errors.append("- Height cannot be empty.\n");
        } else {
            try {
                double height = Double.parseDouble(heightText);
                if (height <= 0) errors.append("- Height must be a positive number.\n");
            } catch (NumberFormatException ex) {
                errors.append("- Height must be a valid number.\n");
            }
        }

        if (weightText.isEmpty()) {
            errors.append("- Weight cannot be empty.\n");
        } else {
            try {
                double weight = Double.parseDouble(weightText);
                if (weight <= 0) errors.append("- Weight must be a positive number.\n");
            } catch (NumberFormatException ex) {
                errors.append("- Weight must be a valid number.\n");
            }
        }

        if (startDate.isEmpty()) {
            errors.append("- Start date cannot be empty.\n");
        } else if (!startDate.matches("\\d{4}-\\d{2}-\\d{2}")) {
            errors.append("- Start date must be in format YYYY-MM-DD.\n");
        }

        if (endDate.isEmpty()) {
            errors.append("- End date cannot be empty.\n");
        } else if (!endDate.matches("\\d{4}-\\d{2}-\\d{2}")) {
            errors.append("- End date must be in format YYYY-MM-DD.\n");
        }

        if (type.isEmpty()) {
            errors.append("- Type cannot be empty.\n");
        } else if (!(type.equals("Gold") || type.equals("Silver"))) {
            errors.append("- Type must be either 'Gold' or 'Silver'.\n");
        }

        // If there are any errors, show them
        if (errors.length() > 0) {
            JOptionPane.showMessageDialog(frame, errors.toString(), "Input Errors", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                // Parse and add customer
                int age = Integer.parseInt(ageText);
                double height = Double.parseDouble(heightText);
                double weight = Double.parseDouble(weightText);

                addCustomer(name, age, phone, email, height, weight, startDate, endDate, type, isActive);
                String[] s = new FileHandler("myDirectory").readLastLine("login.txt").split(",");
                JOptionPane.showMessageDialog(frame, "Customer added successfully!\nand username =" + s[1] + " , password=" + s[2]);

                // Clear fields after successful addition
                nameField.setText("");
                ageField.setText("");
                phoneField.setText("");
                emailField.setText("");
                heightField.setText("");
                weightField.setText("");
                startDateField.setText("");
                endDateField.setText("");
                typeField.setText("");
                isActiveCheckbox.setSelected(false);  // Reset the checkbox

                frame.dispose();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(frame, "An error occurred while adding the customer.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
});


        // Show the frame
        frame.setVisible(true);
    }

    private static void addCustomer(String name, int age, String phone, String email, double height, double weight ,String startDate, String endDate, String type, boolean isactive){
        CustomerManager cm=new CustomerManager();
        cm.add(new Customer(name,age,phone,email,height,weight,startDate,endDate,type,isactive));
        saveRandomCredentials("Customer");
    }

    private static String generateRandomUsername() {
        String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        Random random = new Random();
        StringBuilder username = new StringBuilder();
        for (int i = 0; i < 8; i++) {  // Length of the username
            int index = random.nextInt(characters.length());
            username.append(characters.charAt(index));
        }
        return username.toString();
    }

    private static String generateRandomPassword() {
        String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";
        Random random = new Random();
        StringBuilder password = new StringBuilder();
        for (int i = 0; i < 10; i++) {  // Length of the password
            int index = random.nextInt(characters.length());
            password.append(characters.charAt(index));
        }
        return password.toString();
    }

    // Save random username and password to file
    private static void saveRandomCredentials(String role) {
        String username = generateRandomUsername();
        String password = generateRandomPassword();

        String s ="\n"+role + "," + username + "," + password+","+Trainer.loadLastID("lastCustomerID.txt");
        f.appendToFile(filename,s);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
