/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.gymproject;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

/**
 *
 * @author Haneen
 */
public class TrainerManagerPagee extends javax.swing.JFrame {
    private static FileHandler f=new FileHandler("myDirectory");
    private static String filename="login.txt";
    /**
     * Creates new form TrainerManagerPagee
     */
    public TrainerManagerPagee() {
        initComponents();

        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        this.setVisible(true);
        jPanel1.add(jMenuBar1);
        this.setUndecorated(true);
        this.getContentPane().setBackground(Color.decode("#2B2738"));
        jMenuBar1.setBorderPainted(false);
        this.pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(43, 39, 56));
        jPanel1.setForeground(new java.awt.Color(255, 51, 0));
        jPanel1.setPreferredSize(new java.awt.Dimension(1126, 786));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Welcome to Trainer Manager Page");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap(274, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 908, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(184, 184, 184))
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(277, 277, 277)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(538, Short.MAX_VALUE))
        );

        jMenuBar1.setBackground(new java.awt.Color(110, 84, 181));
        jMenuBar1.setBorder(null);
        jMenuBar1.setForeground(new java.awt.Color(51, 0, 51));
        jMenuBar1.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        jMenuBar1.setPreferredSize(new java.awt.Dimension(1198, 40));

        jMenu1.setText("Add Trainer");
        jMenu1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Delete Trainer");
        jMenu2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Show Trainer by Id");
        jMenu3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        jMenu4.setText("Assign Trainer to Customer");
        jMenu4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu4MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu4);

        jMenu5.setText("List Customers Ids for a specific Trainer");
        jMenu5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jMenu5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu5MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu5);

        jMenu6.setText("Logout");
        jMenu6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jMenu6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu6MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu6);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1366, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 906, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu6MouseClicked
        // TODO add your handling code here:
        int a=JOptionPane.showConfirmDialog(null, "do you really want to Logout","Select",JOptionPane.YES_NO_OPTION);
        if(a==0)
        {
            setVisible(false);
            new LoginPagee().setVisible(true);
        }
    }//GEN-LAST:event_jMenu6MouseClicked

    private void jMenu5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu5MouseClicked
        // TODO add your handling code here:
        openlistcustomers();
    }//GEN-LAST:event_jMenu5MouseClicked

    private void jMenu4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseClicked
        // TODO add your handling code here:
        openassigntrainertocustomer();
    }//GEN-LAST:event_jMenu4MouseClicked

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        // TODO add your handling code here:
        openshowTrainerById();
    }//GEN-LAST:event_jMenu3MouseClicked

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        // TODO add your handling code here:
        opendeleteTrainer();
    }//GEN-LAST:event_jMenu2MouseClicked

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        // TODO add your handling code here
        openaddTrainer();
    }//GEN-LAST:event_jMenu1MouseClicked

private void openlistcustomers(){
      JFrame showCustomerFrame = new JFrame("Show Customers IDs of Trainer By ID");
showCustomerFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

// Set background color of the frame
showCustomerFrame.getContentPane().setBackground(new Color(0x2B2738));  // color #2B2738

// Set up FlowLayout to align components in the center
FlowLayout flowLayout = new FlowLayout(FlowLayout.CENTER, 10, 10);
JPanel panel = new JPanel(flowLayout);
panel.setBackground(new Color(0x2B2738));  // Set the JPanel background to the same color
panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

// Create labels and text fields
JLabel idLabel = new JLabel("Trainer ID:");
idLabel.setForeground(Color.WHITE); // Set label text color to white

JTextField idField = new JTextField();
idField.setBackground(new Color(0x3B364C)); // Set background color of the text field to #3B364C
idField.setForeground(Color.WHITE); // Set text color inside the text field
idField.setPreferredSize(new Dimension(150, 30)); // Set size of the text field

JButton showButton = new JButton("Show");
showButton.setBackground(new Color(0x6E54B5)); // Set button background color
showButton.setForeground(new Color(0xFCFCFA)); // Set button text color
showButton.setPreferredSize(new Dimension(100, 30)); // Set button size

JLabel resultLabel = new JLabel("Customers IDs:");
resultLabel.setForeground(Color.WHITE); // Set label text color to white

JTextArea resultArea = new JTextArea(5, 20);
resultArea.setEditable(false);
resultArea.setBackground(new Color(0x3B364C)); // Set background color of the text area to #3B364C
resultArea.setForeground(Color.WHITE); // Set text color inside the text area
resultArea.setBorder(BorderFactory.createLineBorder(Color.GRAY));

// Add components to the JPanel
panel.add(idLabel);
panel.add(idField);
panel.add(showButton);
panel.add(new JLabel()); // Empty placeholder
panel.add(resultLabel);
panel.add(new JScrollPane(resultArea)); // Add text area in JScrollPane

// Add JPanel to JFrame
showCustomerFrame.add(panel);

// Set frame size to fit the components
showCustomerFrame.pack(); // Automatically adjust the size based on the content
showCustomerFrame.setLocationRelativeTo(null); // Center the frame on the screen
showCustomerFrame.setVisible(true);


        // Add action listener for Show button
       showButton.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        String trainerId = idField.getText().trim();
        if (trainerId.isEmpty()) {
            JOptionPane.showMessageDialog(showCustomerFrame, "Please enter a Trainer ID!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if TrainerID is a valid integer
        try {
            Integer.parseInt(trainerId);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(showCustomerFrame, "Trainer ID must be a valid integer!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Replace this block with actual data retrieval logic
        TrainerManager tm = new TrainerManager();
        String customerData = tm.show_customers_of_trainer(trainerId);
        resultArea.setText(customerData);
    }
});
    }

    private void openassigntrainertocustomer() {
        JFrame showCustomerFrame = new JFrame("Assign Trainer to Customer");
showCustomerFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

// Set background color of the frame
showCustomerFrame.getContentPane().setBackground(new Color(0x2B2738));  // color #2B2738

// Set up FlowLayout to align components in the center
FlowLayout flowLayout = new FlowLayout(FlowLayout.CENTER, 10, 10);
JPanel panel = new JPanel(flowLayout);
panel.setBackground(new Color(0x2B2738));  // Set the JPanel background to the same color
panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

// Create labels and text fields
JLabel tidLabel = new JLabel("Trainer ID:");
tidLabel.setForeground(Color.WHITE); // Set label text color to white

JTextField tidField = new JTextField();
tidField.setBackground(new Color(0x3B364C)); // Set background color of the text field to #3B364C
tidField.setForeground(Color.WHITE); // Set text color inside the text field
tidField.setPreferredSize(new Dimension(150, 30)); // Set size of the text field

JLabel cidLabel = new JLabel("Customer ID:");
cidLabel.setForeground(Color.WHITE); // Set label text color to white

JTextField cidField = new JTextField();
cidField.setBackground(new Color(0x3B364C)); // Set background color of the text field to #3B364C
cidField.setForeground(Color.WHITE); // Set text color inside the text field
cidField.setPreferredSize(new Dimension(150, 30)); // Set size of the text field

JButton assignButton = new JButton("Assign");
assignButton.setBackground(new Color(0x6E54B5)); // Set button background color
assignButton.setForeground(new Color(0xFCFCFA)); // Set button text color
assignButton.setPreferredSize(new Dimension(100, 30)); // Set button size

JLabel resultLabel = new JLabel("Result of Assign:");
resultLabel.setForeground(Color.WHITE); // Set label text color to white

JTextArea resultArea = new JTextArea(5, 20);
resultArea.setEditable(false);
resultArea.setBackground(new Color(0x3B364C)); // Set background color of the text area to #3B364C
resultArea.setForeground(Color.WHITE); // Set text color inside the text area
resultArea.setBorder(BorderFactory.createLineBorder(Color.GRAY));

// Add components to the JPanel
panel.add(tidLabel);
panel.add(tidField);
panel.add(cidLabel);
panel.add(cidField);
panel.add(assignButton);
panel.add(new JLabel()); // Empty placeholder
panel.add(resultLabel);
panel.add(new JScrollPane(resultArea)); // Add text area in JScrollPane

// Add JPanel to JFrame
showCustomerFrame.add(panel);

// Set frame size to fit the components
showCustomerFrame.pack(); // Automatically adjust the size based on the content
showCustomerFrame.setLocationRelativeTo(null); // Center the frame on the screen
showCustomerFrame.setVisible(true);

        // Add action listener for Assign button
  assignButton.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        String trainerId = tidField.getText().trim();
        String customerId = cidField.getText().trim();

        // Check if fields are empty
        if (trainerId.isEmpty() || customerId.isEmpty()) {
            JOptionPane.showMessageDialog(showCustomerFrame, "TrainerID and CustomerID cannot be empty!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        boolean invalidTrainerId = false;
        boolean invalidCustomerId = false;

        // Check if TrainerID is a valid integer
        try {
            Integer.parseInt(trainerId);
        } catch (NumberFormatException ex) {
            invalidTrainerId = true;
        }

        // Check if CustomerID is a valid integer
        try {
            Integer.parseInt(customerId);
        } catch (NumberFormatException ex) {
            invalidCustomerId = true;
        }

        // Display error messages for invalid fields
        if (invalidTrainerId && invalidCustomerId) {
            JOptionPane.showMessageDialog(showCustomerFrame, "Both TrainerID and CustomerID must be valid integers!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (invalidTrainerId) {
            JOptionPane.showMessageDialog(showCustomerFrame, "TrainerID must be a valid integer!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (invalidCustomerId) {
            JOptionPane.showMessageDialog(showCustomerFrame, "CustomerID must be a valid integer!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Assign trainer to customer
        TrainerManager tm = new TrainerManager();
        String result = tm.assigntrainer(trainerId, customerId);

        // Display result
        resultArea.setText(result);

        // Clear text fields
        tidField.setText("");
        cidField.setText("");
    }
});

    }


   private void openshowTrainerById() {
    JFrame showTrainerFrame = new JFrame("Show Trainer By ID");
    showTrainerFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

    
    showTrainerFrame.getContentPane().setBackground(new Color(0x2B2738));  

    FlowLayout flowLayout = new FlowLayout(FlowLayout.CENTER, 10, 10);
    JPanel panel = new JPanel(flowLayout);
    panel.setBackground(new Color(0x2B2738)); 
    panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

    JLabel idLabel = new JLabel("Trainer ID:");
    idLabel.setForeground(Color.WHITE); 

    JTextField idField = new JTextField();
    idField.setBackground(new Color(0x3B364C)); 
    idField.setForeground(Color.WHITE); 
    idField.setPreferredSize(new Dimension(150, 30)); 

    JButton showButton = new JButton("Show");
    showButton.setBackground(new Color(0x6E54B5)); 
    showButton.setForeground(new Color(0xFCFCFA)); 
    showButton.setPreferredSize(new Dimension(100, 30)); 

    JLabel resultLabel = new JLabel("Trainer Details:");
    resultLabel.setForeground(Color.WHITE);

    JTextArea resultArea = new JTextArea(5, 20);
    resultArea.setEditable(false);
    resultArea.setBackground(new Color(0x3B364C));
    resultArea.setForeground(Color.WHITE); 
    resultArea.setBorder(BorderFactory.createLineBorder(Color.GRAY));

    
    panel.add(idLabel);
    panel.add(idField);
    panel.add(showButton);
    panel.add(new JLabel()); 
    panel.add(resultLabel);
    panel.add(new JScrollPane(resultArea)); 

  
    showTrainerFrame.add(panel);


    showTrainerFrame.pack(); 
    showTrainerFrame.setLocationRelativeTo(null); 
    showTrainerFrame.setVisible(true);


        // Add action listener for Show button
     showButton.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        String trainerId = idField.getText().trim();
        if (trainerId.isEmpty()) {
            JOptionPane.showMessageDialog(showTrainerFrame, "Please enter a Trainer ID!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if ID is a valid integer
        try {
            Integer.parseInt(trainerId);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(showTrainerFrame, "Trainer ID must be a valid integer!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Replace this block with actual data retrieval logic
        TrainerManager tm = new TrainerManager();
        String customerData = tm.show_by_id(trainerId);
        resultArea.setText(customerData);
    }
});

    }

    private void opendeleteTrainer(){
        JFrame deleteTrainer = new JFrame("Delete Trainer");
deleteTrainer.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
deleteTrainer.setSize(400, 300);

deleteTrainer.getContentPane().setBackground(new Color(0x2B2738));

JPanel panel = new JPanel();
panel.setLayout(new FlowLayout(FlowLayout.CENTER, 10, 10)); 
panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
panel.setBackground(new Color(0x2B2738)); 

JLabel idLabel = new JLabel("Trainer id:");
idLabel.setForeground(Color.WHITE); 
JTextField idField = new JTextField();
idField.setBackground(new Color(0x3B364C)); 
idField.setForeground(Color.WHITE); 
idField.setPreferredSize(new Dimension(150, 30)); 
JButton deleteButton = new JButton("Delete");
deleteButton.setBackground(new Color(0x6E54B5)); 
deleteButton.setForeground(new Color(0xFCFCFA)); 
deleteButton.setPreferredSize(new Dimension(100, 30)); 

panel.add(idLabel);
panel.add(idField);
panel.add(deleteButton);
deleteTrainer.add(panel);

deleteTrainer.setLocationRelativeTo(null); 
deleteTrainer.setVisible(true);
deleteTrainer.pack();

        // Add action listener for Delete button
deleteButton.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        String customerId = idField.getText().trim();  // Get the ID from the text field

        // Check if ID is empty
        if (customerId.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter a Customer ID!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if ID is a valid integer
        try {
            Integer.parseInt(customerId);  // Try to parse the ID as an integer
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Customer ID must be a valid integer!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Proceed with deleting the trainer if the ID is valid
        TrainerManager tm = new TrainerManager();
        if (tm.search_by_id(customerId)) {
            tm.delete(customerId);
            JOptionPane.showMessageDialog(null, "Trainer deleted!");
        } else {
            JOptionPane.showMessageDialog(null, "Trainer with this ID not found!");
        }
    }
});

    }

    private void openaddTrainer(){

        // Create the frame for TrainerManagerPage
    JFrame frame = new JFrame("Trainer Manager Page");
    frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    frame.setSize(500, 500);
    frame.setExtendedState(JFrame.MAXIMIZED_BOTH);  // Maximized frame

    // Set the background color of the frame
    frame.getContentPane().setBackground(new Color(0x2B2738));  // color #2B2738

    // Setup GroupLayout
    GroupLayout layout = new GroupLayout(frame.getContentPane());
    frame.getContentPane().setLayout(layout);

    // Add labels and text fields for trainer data
    JLabel nameLabel = new JLabel("Name:");
    nameLabel.setForeground(Color.WHITE);
    JTextField nameField = new JTextField();
    nameField.setBackground(new Color(0x3B364C));
    nameField.setForeground(Color.WHITE);
    nameField.setPreferredSize(new Dimension(200, 30));

    JLabel ageLabel = new JLabel("Age:");
    ageLabel.setForeground(Color.WHITE);
    JTextField ageField = new JTextField();
    ageField.setBackground(new Color(0x3B364C));
    ageField.setForeground(Color.WHITE);
    ageField.setPreferredSize(new Dimension(200, 30));

    JLabel phoneLabel = new JLabel("Phone:");
    phoneLabel.setForeground(Color.WHITE);
    JTextField phoneField = new JTextField();
    phoneField.setBackground(new Color(0x3B364C));
    phoneField.setForeground(Color.WHITE);
    phoneField.setPreferredSize(new Dimension(200, 30));

    JLabel emailLabel = new JLabel("Email:");
    emailLabel.setForeground(Color.WHITE);
    JTextField emailField = new JTextField();
    emailField.setBackground(new Color(0x3B364C));
    emailField.setForeground(Color.WHITE);
    emailField.setPreferredSize(new Dimension(200, 30));

    JLabel specialtyLabel = new JLabel("Specialty:");
    specialtyLabel.setForeground(Color.WHITE);
    JTextField specialtyField = new JTextField();
    specialtyField.setBackground(new Color(0x3B364C));
    specialtyField.setForeground(Color.WHITE);
    specialtyField.setPreferredSize(new Dimension(200, 30));

    JLabel experienceYearsLabel = new JLabel("Experience Years:");
    experienceYearsLabel.setForeground(Color.WHITE);
    JTextField experienceYearsField = new JTextField();
    experienceYearsField.setBackground(new Color(0x3B364C));
    experienceYearsField.setForeground(Color.WHITE);
    experienceYearsField.setPreferredSize(new Dimension(200, 30));

    JLabel salaryLabel = new JLabel("Salary:");
    salaryLabel.setForeground(Color.WHITE);
    JTextField salaryField = new JTextField();
    salaryField.setBackground(new Color(0x3B364C));
    salaryField.setForeground(Color.WHITE);
    salaryField.setPreferredSize(new Dimension(200, 30));

    JLabel hiringDateLabel = new JLabel("Hiring Date (YYYY-MM-DD):");
    hiringDateLabel.setForeground(Color.WHITE);
    JTextField hiringDateField = new JTextField();
    hiringDateField.setBackground(new Color(0x3B364C));
    hiringDateField.setForeground(Color.WHITE);
    hiringDateField.setPreferredSize(new Dimension(200, 30));

    JButton addButton = new JButton("Add Trainer");
    addButton.setBackground(new Color(0x6E54B5));
    addButton.setForeground(new Color(0xFCFCFA));
    addButton.setPreferredSize(new Dimension(150, 40));

    // Arrange components using GroupLayout
    layout.setAutoCreateGaps(true);
    layout.setAutoCreateContainerGaps(true);

    // Arrange labels and text fields vertically
    layout.setHorizontalGroup(
        layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(nameLabel)
            .addComponent(nameField)
            .addComponent(ageLabel)
            .addComponent(ageField)
            .addComponent(phoneLabel)
            .addComponent(phoneField)
            .addComponent(emailLabel)
            .addComponent(emailField)
            .addComponent(specialtyLabel)
            .addComponent(specialtyField)
            .addComponent(experienceYearsLabel)
            .addComponent(experienceYearsField)
            .addComponent(salaryLabel)
            .addComponent(salaryField)
            .addComponent(hiringDateLabel)
            .addComponent(hiringDateField)
            .addComponent(addButton)
    );

    layout.setVerticalGroup(
        layout.createSequentialGroup()
            .addComponent(nameLabel)
            .addComponent(nameField)
            .addComponent(ageLabel)
            .addComponent(ageField)
            .addComponent(phoneLabel)
            .addComponent(phoneField)
            .addComponent(emailLabel)
            .addComponent(emailField)
            .addComponent(specialtyLabel)
            .addComponent(specialtyField)
            .addComponent(experienceYearsLabel)
            .addComponent(experienceYearsField)
            .addComponent(salaryLabel)
            .addComponent(salaryField)
            .addComponent(hiringDateLabel)
            .addComponent(hiringDateField)
            .addComponent(addButton)
    );

    frame.pack();
    frame.setLocationRelativeTo(null); 
    frame.setVisible(true);
        // Action listener for the "Add Customer" button
     addButton.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        StringBuilder errors = new StringBuilder();

        String name = nameField.getText().trim();
        String ageText = ageField.getText().trim();
        String phone = phoneField.getText().trim();
        String email = emailField.getText().trim();
        String specialty = specialtyField.getText().trim();
        String experienceYearsText = experienceYearsField.getText().trim();
        String salaryText = salaryField.getText().trim();
        String hiringDate = hiringDateField.getText().trim();

        // Validation for each field
        if (name.isEmpty()) {
            errors.append("- Name cannot be empty.\n");
        }

        if (ageText.isEmpty()) {
            errors.append("- Age cannot be empty.\n");
        } else {
            try {
                int age = Integer.parseInt(ageText);
                if (age <= 0) errors.append("- Age must be a positive number.\n");
            } catch (NumberFormatException ex) {
                errors.append("- Age must be a valid number.\n");
            }
        }

        if (phone.isEmpty()) {
            errors.append("- Phone cannot be empty.\n");
        } else if (!phone.matches("\\d{10,15}")) {
            errors.append("- Phone number must contain 10-15 digits.\n");
        }

        if (email.isEmpty()) {
            errors.append("- Email cannot be empty.\n");
        } else if (!email.matches("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$")) {
            errors.append("- Invalid email format.\n");
        }

        if (specialty.isEmpty()) {
            errors.append("- Specialty cannot be empty.\n");
        }

        if (experienceYearsText.isEmpty()) {
            errors.append("- Experience years cannot be empty.\n");
        } else {
            try {
                int experienceYears = Integer.parseInt(experienceYearsText);
                if (experienceYears < 0) errors.append("- Experience years must be zero or a positive number.\n");
            } catch (NumberFormatException ex) {
                errors.append("- Experience years must be a valid number.\n");
            }
        }

        if (salaryText.isEmpty()) {
            errors.append("- Salary cannot be empty.\n");
        } else {
            try {
                double salary = Double.parseDouble(salaryText);
                if (salary <= 0) errors.append("- Salary must be a positive number.\n");
            } catch (NumberFormatException ex) {
                errors.append("- Salary must be a valid number.\n");
            }
        }

        if (hiringDate.isEmpty()) {
            errors.append("- Hiring date cannot be empty.\n");
        } else if (!hiringDate.matches("\\d{4}-\\d{2}-\\d{2}")) {
            errors.append("- Hiring date must be in format YYYY-MM-DD.\n");
        }

        // If there are any errors, show them
        if (errors.length() > 0) {
            JOptionPane.showMessageDialog(frame, errors.toString(), "Input Errors", JOptionPane.ERROR_MESSAGE);
        } else {
            // Assuming addTrainer is your method to handle the data
            addTrainer(name, Integer.parseInt(ageText), phone, email, specialty, Integer.parseInt(experienceYearsText), Double.parseDouble(salaryText), hiringDate);
            String[] s = new FileHandler("myDirectory").readLastLine("login.txt").split(",");
            JOptionPane.showMessageDialog(frame, "Trainer added successfully!\nand username =" + s[1] + " , password=" + s[2]);

            // Clear fields after successful addition
            nameField.setText("");
            ageField.setText("");
            phoneField.setText("");
            emailField.setText("");
            specialtyField.setText("");
            experienceYearsField.setText("");
            salaryField.setText("");
            hiringDateField.setText("");
        }
    }
});

        // Show the frame
        frame.setVisible(true);
    }

    private static void addTrainer(String name, int age, String phone, String email, String specialty, int experianceyears ,double salary, String hiringDate){
        TrainerManager tm=new TrainerManager();
        tm.add(new Trainer(name,age,phone,email,specialty,experianceyears,salary,hiringDate));
        saveRandomCredentials("Trainer");

    }

    private static String generateRandomUsername() {
        String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        Random random = new Random();
        StringBuilder username = new StringBuilder();
        for (int i = 0; i < 8; i++) {  // Length of the username
            int index = random.nextInt(characters.length());
            username.append(characters.charAt(index));
        }
        return username.toString();
    }

    private static String generateRandomPassword() {
        String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";
        Random random = new Random();
        StringBuilder password = new StringBuilder();
        for (int i = 0; i < 10; i++) {  // Length of the password
            int index = random.nextInt(characters.length());
            password.append(characters.charAt(index));
        }
        return password.toString();
    }

    // Save random username and password to file
    private static void saveRandomCredentials(String role) {
        String username = generateRandomUsername();
        String password = generateRandomPassword();

        String s ="\n"+role + "," + username + "," + password+","+Trainer.loadLastID("lastTrainerID.txt");
        f.appendToFile(filename,s);
    }




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
